<?xml version="1.0"?>
<launch>
  <!-- GRIPPER PARAM -->
  <arg name="robotiq_gripper"   default="false"/>

  <!-- COLLISION WALLS PARAM -->
  <arg name="collision_walls"   default="false"/>

	<!-- SUMMIT XL STEEL-->
	<arg name="id_robot" default="summit_xl"/>
	<arg name="xacro_robot_a" default="irlab_summit_xls_std.urdf.xacro" />

	<!-- GAZEBO -->
	<arg name="ros_planar_move_plugin" default="true"/> <!-- disables gazebo ros_control plugin -->
	<arg name="gazebo_world" default="$(find icclab_summit_xl)/worlds/summit_xl_office.world"/>
	<arg name="gazebo_gui" default="false"/>

        <!-- NAV STACK PARAMS -->
        <arg name="launch_rviz_nav" default="true"/>
        <arg name="map_file_a" default="willow_garage/willow_garage.yaml"/>
        <arg name="localization_robot_a" default="false"/>
        <arg name="gmapping_robot_a" default="false"/>
        <arg name="move_base_robot_a" default="true"/>
        <arg name="amcl_and_mapserver_a" default="true"/>
        <arg name="slam" default="false"/>
        <arg name="omni" default="true"/>

	<!-- ARM CONTROL PARAMS -->
	<arg name="launch_rviz_grasping" default="true"/>
	<arg name="enable_arm" default="true"/>
	<arg name="db" default="false"/> <!-- By default, we do not start a database (it can be large) -->
	<arg name="db_path" default="$(find icclab_summit_xl)/default_warehouse_mongo_db"/> <!-- Allow user to specify database location -->
	<arg name="debug" default="false"/> <!-- By default, we are not in debug mode -->
	<arg name="simulation" default="true"/>

	<!-- TESTING -->
	<arg name="nav_test" default="false"/>


	<!--======================== GAZEBO + NAV STACK ==================================-->
	<include file="$(find icclab_summit_xl)/launch/sim/irlab_summit_xl_gazebo.launch">
		<!-- general args -->
		<arg name="launch_rviz_nav" value="$(arg launch_rviz_nav)"/>
		<arg name="gazebo_world" value="$(arg gazebo_world)"/>
		<arg name="gui" value="$(arg gazebo_gui)"/>
		<arg name="ros_planar_move_plugin" value="$(arg ros_planar_move_plugin)"/>
		<!-- robot args -->
		<arg name="map_file_a" value="$(arg map_file_a)"/>
		<arg name="localization_robot_a" value="$(arg localization_robot_a)"/>
		<arg name="gmapping_robot_a" value="$(arg gmapping_robot_a)"/>
		<arg name="move_base_robot_a" value="$(arg move_base_robot_a)"/>
		<arg name="amcl_and_mapserver_a" value="$(arg amcl_and_mapserver_a)"/>
		<arg name="xacro_robot_a" value="$(arg xacro_robot_a)"/>
		<arg name="nav_test" value="$(arg nav_test)"/>
		<arg name="slam" value="$(arg slam)"/>
		<arg name="omni" value="$(arg omni)"/>
		<arg name="robotiq_gripper"        value="$(arg robotiq_gripper)"/>
		<arg name="collision_walls"        value="$(arg collision_walls)"/>
	</include>
	

	<!--============================= ARM CONTROL =============================-->
	<group if="$(arg enable_arm)" ns="$(arg id_robot)">

		<!-- Load the SRDF and other .yaml configuration files on the param server -->
		<include file="$(find icclab_summit_xl)/launch/planning_context.launch">
			<arg name="simulation" value="$(arg simulation)"/>
			<arg name="robotiq_gripper" value="$(arg robotiq_gripper)"/>
		</include>


		<!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
		<include file="$(find icclab_summit_xl)/launch/move_group.launch">
			<arg name="allow_trajectory_execution" value="true"/>
			<arg name="fake_execution" value="false"/>
			<arg name="info" value="true"/>
			<arg name="debug" value="$(arg debug)"/>
		</include>

		<!-- Controller parameters with Schunk gripper-->
		<rosparam file="$(find icclab_summit_xl)/config/controllers.yaml" unless="$(arg robotiq_gripper)"/>
		<!-- Controller parameters with Robotiq gripper-->
		<rosparam file="$(find icclab_summit_xl)/config/controllers_robotiqgripper.yaml" if="$(arg robotiq_gripper)"/>

		<!--	The semantic description that corresponds to the URDF -->
		<!--	<arg name="robot_description" default="robot_description"/>-->
		<!--	<param name="$(arg robot_description)_semantic" textfile="$(find icclab_summit_xl)/config/summit_xl.srdf" />-->

		<!-- run point cloud filtering--> 
		<node name="pointcloud_filtering" pkg="irlab_point_cloud_filtering" type="point_cloud_filtering_server" respawn="false" args="/summit_xl/arm_camera/depth_registered/points" output="screen"/>

		<!-- import octomap sensors -->
		<include ns="move_group"  file="$(find icclab_summit_xl)/launch/include/sensor_manager.launch.xml"/>

		<!-- Run Rviz and load the default config to see the state of the move_group node -->
		<arg name="command_args" value="-d $(find icclab_summit_xl)/rviz/grasping.rviz" />
		<node if="$(arg launch_rviz_grasping)" name="rviz_grasping" pkg="rviz" type="rviz" args="$(arg command_args)" respawn="false" output="screen">
			<rosparam command="load" file="$(find icclab_summit_xl)/config/kinematics.yaml"/>
		</node>

		<!-- If database loading was enabled, start mongodb as well -->
		<include file="$(find icclab_summit_xl)/launch/default_warehouse_db.launch" if="$(arg db)">
			<arg name="moveit_warehouse_database_path" value="$(arg db_path)"/>
		</include>

		<node name="foo_throttler_front" type="throttle" pkg="topic_tools" args="messages /summit_xl/front_rgbd_camera/depth/points 1 /summit_xl/front_rgbd_camera/depth/points_throttled" />

		<node name="foo_throttler_arm" type="throttle" pkg="topic_tools" args="messages /summit_xl/arm_camera/depth_registered/points 1 /summit_xl/arm_camera/depth_registered/points_throttled" />

	</group>

	<!-- run grasp detection -->
	<include if="$(arg enable_arm)" file="$(find icclab_summit_xl)/launch/include/grasp_generation.launch.xml"/>

</launch>
